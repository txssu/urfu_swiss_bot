defmodule UrFUSwissBot.Bot.Menu do
  import ExGram.Dsl
  import ExGram.Dsl.Keyboard

  alias ExGram.Cnt
  alias ExGram.Model.CallbackQuery

  require ExGram.Dsl
  require ExGram.Dsl.Keyboard

  @text """
  –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
  """

  @keyboard (keyboard(:inline) do
               row do
                 button("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üè´", callback_data: "schedule")
                 button("–ë–†–° üî∞", callback_data: "brs")
               end

               row do
                 button("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –°–µ—Ä–≤–∏—Å—ã üí∏", callback_data: "ubu")
               end

               row do
                 button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "settings")
               end

               row do
                 button("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ‚úâÔ∏è", callback_data: "feedback")
               end
             end)

  @spec handle({:callback_query, CallbackQuery.t()} | any(), Cnt.t()) :: Cnt.t()
  def handle({:callback_query, _}, context), do: menu_by_editing(context)

  def handle(_event, context), do: menu_by_message(context)

  @spec menu_by_editing(Cnt.t()) :: Cnt.t()
  def menu_by_editing(context) do
    edit(context, :inline, @text, reply_markup: @keyboard)
  end

  @spec menu_by_message(Cnt.t()) :: Cnt.t()
  def menu_by_message(context) do
    answer(context, @text, reply_markup: @keyboard)
  end
end
