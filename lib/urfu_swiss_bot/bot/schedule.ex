defmodule UrFUSwissBot.Bot.Schedule do
  alias UrFUSwissBot.Modeus
  alias UrFUSwissBot.Repo.User
  alias UrFUSwissBot.Utils

  import ExGram.Dsl
  require ExGram.Dsl

  import ExGram.Dsl.Keyboard
  require ExGram.Dsl.Keyboard

  @start_text """
  –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –¥–∞—Ç—É.
  –í–º–µ—Å—Ç–æ 25.09.2023 –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å 25.09 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 25
  """

  @today_no_more_lessons """
  –ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å üòº
  """

  @tommorow_no_lessons """
  –ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –ø–∞—Ä. –ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—åü•¥
  """

  @no_lessons """
  –í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç.
  """

  @parse_error """
  –í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  """

  @start_keyboard (keyboard :inline do
                     row do
                       button("–°–µ–≥–æ–¥–Ω—è‚¨áÔ∏è", callback_data: "schedule-today")
                       button("–ó–∞–≤—Ç—Ä–∞‚û°Ô∏è", callback_data: "schedule-tomorrow")
                     end

                     row do
                       button("–ú–µ–Ω—é", callback_data: "menu")
                     end
                   end)

  defp keyboard_next(datetime) do
    previous_day = Utils.start_of_previous_day(datetime) |> DateTime.to_iso8601(:basic)
    next_day = Utils.start_of_next_day(datetime) |> DateTime.to_iso8601(:basic)

    keyboard :inline do
      row do
        button("‚¨ÖÔ∏è", callback_data: "schedule-date-#{previous_day}")
        button("‚û°Ô∏è", callback_data: "schedule-date-#{next_day}")
      end

      row do
        button("–ú–µ–Ω—é", callback_data: "menu")
      end
    end
  end

  def handle({:callback_query, %{data: "schedule"} = callback_query}, context) do
    context.extra.user
    |> User.set_state({__MODULE__, :date})
    |> User.save()

    context
    |> answer_callback(callback_query)
    |> edit(:inline, @start_text, reply_markup: @start_keyboard)
  end

  def handle({:callback_query, %{data: "schedule-today"} = callback_query}, context) do
    today = DateTime.now!("Asia/Yekaterinburg")

    reply_callback(context, callback_query, today, @today_no_more_lessons)
  end

  def handle({:callback_query, %{data: "schedule-tomorrow"} = callback_query}, context) do
    tomorrow = DateTime.now!("Asia/Yekaterinburg") |> Utils.start_of_next_day()

    reply_callback(context, callback_query, tomorrow, @tommorow_no_lessons)
  end

  def handle({:callback_query, %{data: "schedule-date-" <> date} = callback_query}, context) do
    {:ok, datetime, _offset} = DateTime.from_iso8601(date, :basic)

    reply_callback(context, callback_query, datetime)
  end

  def handle(:date, {:text, text, _message}, context) do
    case Utils.parse_russian_date(text) do
      {:ok, datetime} -> reply_message(context, datetime)
      :error -> answer(context, @parse_error)
    end
  end

  def reply_callback(context, callback_query, datetime, no_lessons_message \\ :auto) do
    response = reply_with(context, datetime, no_lessons_message)

    context
    |> answer_callback(callback_query)
    |> edit(:inline, response, reply_markup: keyboard_next(datetime))
  end

  def reply_message(context, datetime) do
    response = reply_with(context, datetime, :auto)

    context
    |> answer(response, reply_markup: keyboard_next(datetime))
  end

  defp reply_with(context, datetime, no_lessons_message) do
    user = context.extra.user

    formatted_date =
      Calendar.strftime(datetime, "%A, %d %B",
        day_of_week_names: &Utils.weekday_to_russian/1,
        month_names: &Utils.month_to_russian/1
      )

    case get_response(user, datetime) do
      "" ->
        case no_lessons_message do
          :auto -> "#{formatted_date}\n\n#{@no_lessons}"
          str -> str
        end

      response ->
        "#{formatted_date}\n\n#{response}"
    end
  end

  def get_response(user, date) do
    with {:auth, {:ok, auth}} <- {:auth, Modeus.Auth.auth_user(user)},
         {:api, {:ok, response}} <- {:api, Modeus.Schedule.get_schedule_by_day(auth, date)} do
      response
    else
      {:auth, _} -> "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
      {:api, _} -> "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    end
  end
end
