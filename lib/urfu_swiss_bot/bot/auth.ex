defmodule UrFUSwissBot.Bot.Auth do
  import ExGram.Dsl

  alias UrFUSwissBot.Bot.Menu
  alias UrFUSwissBot.Modeus
  alias UrFUSwissBot.Repo.User

  require ExGram.Dsl

  @auth_success "üéâüéä–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüéâüéä"

  @wrong_credentials "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å‚ùå"

  @parse_error """
  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∏–∂–µ:
  –õ–û–ì–ò–ù
  –ü–ê–†–û–õ–¨

  –ü—Ä–∏–º–µ—Ä:
  ivan.ivanov@mail.ru
  123456qwerty
  """

  def handle(:auth, {:text, text, message}, context) do
    user = context.extra.user

    case String.split(text) do
      [username, password] ->
        user
        |> User.set_credentials(username, password)
        |> try_auth_user(message, context)

      _error ->
        answer(context, @parse_error)
    end
  end

  defp try_auth_user(user, message, context) do
    case Modeus.auth_user(user) do
      {:ok, _autj} ->
        user
        |> User.nil_state()
        |> User.save()

        context
        |> accepted(message, user.username)
        |> answer(@auth_success)
        |> Menu.menu_by_message()

      _error ->
        context
        |> accepted(message, user.username)
        |> answer(@wrong_credentials)
    end
  end

  defp accepted(context, message, username) do
    context
    |> delete(message)
    |> answer(message_deleted(username))
  end

  defp message_deleted(username) do
    email = hide_email(username)

    """
    –í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    #{email}
    ********

    –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    """
  end

  defp hide_email(email, result \\ "", visible_characters \\ 3)

  defp hide_email("@" <> _domain = domain, result, _visible_characters) do
    result <> domain
  end

  defp hide_email("", result, _visible_characters) do
    result
  end

  defp hide_email(<<_char::utf8, rest::binary>>, result, 0) do
    hide_email(rest, result <> "*", 0)
  end

  defp hide_email(<<char::utf8, rest::binary>>, result, visible_characters) do
    hide_email(rest, <<result::binary, char::utf8>>, visible_characters - 1)
  end
end
